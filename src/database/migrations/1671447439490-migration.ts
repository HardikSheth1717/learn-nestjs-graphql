import { MigrationInterface, QueryRunner } from "typeorm";

export class migration1671447439490 implements MigrationInterface {
    name = 'migration1671447439490'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE \`item_category\` (\`item_category_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`code\` varchar(50) NOT NULL COMMENT 'Unique code of the item category.', \`item_category_name\` varchar(100) NOT NULL COMMENT 'Name of the item category.', \`remarks\` varchar(8000) NULL COMMENT 'Name of the item category.', \`createdby\` int NOT NULL COMMENT 'User id of a user who created the record.', \`createddate\` datetime NOT NULL COMMENT 'Date and time when the record is created.', \`modifiedby\` int NULL COMMENT 'User id of a user who modified the record.', \`modifieddate\` datetime NULL COMMENT 'Date and time when the record is modified.', \`issystem\` tinyint NOT NULL COMMENT 'Is generated by the system.', UNIQUE INDEX \`IDX_7173efc7a9b80590cd4f5a0026\` (\`item_category_id\`), UNIQUE INDEX \`IDX_d07bbc72c8822787efab782a6c\` (\`code\`), PRIMARY KEY (\`item_category_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`feature_group\` (\`feature_group_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`feature_group_name\` varchar(100) NOT NULL COMMENT 'Name of the feature group.', \`createdby\` int NOT NULL COMMENT 'User id of a user who created the record.', \`createddate\` datetime NOT NULL COMMENT 'Date and time when the record is created.', \`modifiedby\` int NULL COMMENT 'User id of a user who modified the record.', \`modifieddate\` datetime NULL COMMENT 'Date and time when the record is modified.', UNIQUE INDEX \`IDX_4e543715735568012740d8b1a5\` (\`feature_group_id\`), UNIQUE INDEX \`IDX_a867c6352cbea4809c8654f54c\` (\`feature_group_name\`), PRIMARY KEY (\`feature_group_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`feature\` (\`feature_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`feature_group_id\` int NOT NULL COMMENT 'FK of the table.', \`code\` varchar(50) NOT NULL COMMENT 'Unique code of the feature.', \`feature_name\` varchar(100) NOT NULL COMMENT 'Name of the feature.', \`remarks\` varchar(255) NULL COMMENT 'Name of the feature.', \`featureimage\` varchar(500) NULL COMMENT 'Feature image path.', \`createdby\` int NOT NULL COMMENT 'User id of a user who created the record.', \`createddate\` datetime NOT NULL COMMENT 'Date and time when the record is created.', \`modifiedby\` int NULL COMMENT 'User id of a user who modified the record.', \`modifieddate\` datetime NULL COMMENT 'Date and time when the record is modified.', UNIQUE INDEX \`IDX_1e43309a0b5bc1a46be4662a65\` (\`feature_id\`), UNIQUE INDEX \`IDX_c30465b5a6e0fae1c8ee7e3120\` (\`code\`), UNIQUE INDEX \`IDX_b940d32bce4a451ffd433ab995\` (\`feature_name\`), PRIMARY KEY (\`feature_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`role_feature\` (\`role_feature_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`role_id\` smallint NOT NULL COMMENT 'FK to role table.', \`feature_id\` int NOT NULL COMMENT 'FK to feature table.', \`canCreate\` tinyint NOT NULL COMMENT 'User have permission to create new record or not.', \`canModify\` tinyint NOT NULL COMMENT 'User have permission to modify an existing record or not.', \`canView\` tinyint NOT NULL COMMENT 'User have permission to view records or not.', \`canDelete\` tinyint NOT NULL COMMENT 'User have permission to delete an existing record or not.', \`canManage\` tinyint NOT NULL COMMENT 'User have permission to manage records or not.', UNIQUE INDEX \`IDX_f1b13c6087078d96bb48a7bf6a\` (\`role_feature_id\`), PRIMARY KEY (\`role_feature_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`user\` (\`user_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`account_id\` bigint NOT NULL COMMENT 'FK to account table.', \`firstname\` varchar(100) NOT NULL COMMENT 'First name of the user.', \`lastname\` varchar(100) NOT NULL COMMENT 'Last name of the user.', \`username\` varchar(200) NOT NULL COMMENT 'Username of the user.', \`email\` varchar(200) NOT NULL COMMENT 'Email address of the user.', \`password\` varbinary(128) NOT NULL COMMENT 'Password to login into the system.', \`isactive\` tinyint NOT NULL COMMENT 'Is active user.', \`profileimage\` varchar(500) NULL COMMENT 'Profile image path.', \`createdby\` int NOT NULL COMMENT 'User id of a user who created the record.', \`createddate\` datetime NOT NULL COMMENT 'Date and time when the record is created.', \`modifiedby\` int NULL COMMENT 'User id of a user who modified the record.', \`modifieddate\` datetime NULL COMMENT 'Date and time when the record is modified.', \`issystem\` tinyint NOT NULL COMMENT 'Is generated by the system.', \`isconfirmed\` tinyint NOT NULL COMMENT 'Is confirmed / varified user (email verification).', UNIQUE INDEX \`IDX_758b8ce7c18b9d347461b30228\` (\`user_id\`), UNIQUE INDEX \`IDX_78a916df40e02a9deb1c4b75ed\` (\`username\`), UNIQUE INDEX \`IDX_e12875dfb3b1d92d7d7c5377e2\` (\`email\`), PRIMARY KEY (\`user_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`role\` (\`role_id\` smallint NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`role_name\` varchar(50) NOT NULL COMMENT 'Name of the role.', \`createdby\` int NOT NULL COMMENT 'User id of a user who created the record.', \`createddate\` datetime NOT NULL COMMENT 'Date and time when the record is created.', \`modifiedby\` int NULL COMMENT 'User id of a user who modified the record.', \`modifieddate\` datetime NULL COMMENT 'Date and time when the record is modified.', \`issystem\` tinyint NOT NULL COMMENT 'Is generated by the system.', \`isDefault\` tinyint NULL COMMENT 'Is default role or not.' DEFAULT 0, UNIQUE INDEX \`IDX_df46160e6aa79943b83c81e496\` (\`role_id\`), PRIMARY KEY (\`role_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`user_session\` (\`user_session_id\` int NOT NULL AUTO_INCREMENT COMMENT 'PK of the table.', \`user_id\` int NOT NULL COMMENT 'FK to user table.', \`session_id\` varchar(500) NULL COMMENT 'Unique session id generate by uuid.', \`refresh_token\` text NULL COMMENT 'Refresh token.', \`expirytime\` bigint NULL COMMENT 'Expiry time of the refresh token.', \`device\` varchar(500) NULL COMMENT 'Device details like manufacturar name, model name etc.', \`operating_system\` varchar(500) NULL COMMENT 'Operating system details like OS name, version etc.', \`browser\` varchar(500) NULL COMMENT 'Browser details like broeser name, version etc.', \`location\` varchar(500) NULL COMMENT 'Location details like latitude, longitude, address details etc.', \`ip_address\` varchar(50) NULL COMMENT 'IP address of the device.', \`loggedin_datetime\` datetime NOT NULL COMMENT 'Logged in date time.', UNIQUE INDEX \`IDX_f53307a84bc385af0550f21aa9\` (\`user_session_id\`), UNIQUE INDEX \`IDX_50c2b6e58a37166dab435111f2\` (\`session_id\`), PRIMARY KEY (\`user_session_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`CREATE TABLE \`user_role\` (\`role_id\` smallint NOT NULL, \`user_id\` int NOT NULL, INDEX \`IDX_32a6fc2fcb019d8e3a8ace0f55\` (\`role_id\`), INDEX \`IDX_d0e5815877f7395a198a4cb0a4\` (\`user_id\`), PRIMARY KEY (\`role_id\`, \`user_id\`)) ENGINE=InnoDB`);
        await queryRunner.query(`ALTER TABLE \`user_role\` ADD CONSTRAINT \`FK_32a6fc2fcb019d8e3a8ace0f55f\` FOREIGN KEY (\`role_id\`) REFERENCES \`role\`(\`role_id\`) ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE \`user_role\` ADD CONSTRAINT \`FK_d0e5815877f7395a198a4cb0a46\` FOREIGN KEY (\`user_id\`) REFERENCES \`user\`(\`user_id\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE \`user_role\` DROP FOREIGN KEY \`FK_d0e5815877f7395a198a4cb0a46\``);
        await queryRunner.query(`ALTER TABLE \`user_role\` DROP FOREIGN KEY \`FK_32a6fc2fcb019d8e3a8ace0f55f\``);
        await queryRunner.query(`DROP INDEX \`IDX_d0e5815877f7395a198a4cb0a4\` ON \`user_role\``);
        await queryRunner.query(`DROP INDEX \`IDX_32a6fc2fcb019d8e3a8ace0f55\` ON \`user_role\``);
        await queryRunner.query(`DROP TABLE \`user_role\``);
        await queryRunner.query(`DROP INDEX \`IDX_50c2b6e58a37166dab435111f2\` ON \`user_session\``);
        await queryRunner.query(`DROP INDEX \`IDX_f53307a84bc385af0550f21aa9\` ON \`user_session\``);
        await queryRunner.query(`DROP TABLE \`user_session\``);
        await queryRunner.query(`DROP INDEX \`IDX_df46160e6aa79943b83c81e496\` ON \`role\``);
        await queryRunner.query(`DROP TABLE \`role\``);
        await queryRunner.query(`DROP INDEX \`IDX_e12875dfb3b1d92d7d7c5377e2\` ON \`user\``);
        await queryRunner.query(`DROP INDEX \`IDX_78a916df40e02a9deb1c4b75ed\` ON \`user\``);
        await queryRunner.query(`DROP INDEX \`IDX_758b8ce7c18b9d347461b30228\` ON \`user\``);
        await queryRunner.query(`DROP TABLE \`user\``);
        await queryRunner.query(`DROP INDEX \`IDX_f1b13c6087078d96bb48a7bf6a\` ON \`role_feature\``);
        await queryRunner.query(`DROP TABLE \`role_feature\``);
        await queryRunner.query(`DROP INDEX \`IDX_b940d32bce4a451ffd433ab995\` ON \`feature\``);
        await queryRunner.query(`DROP INDEX \`IDX_c30465b5a6e0fae1c8ee7e3120\` ON \`feature\``);
        await queryRunner.query(`DROP INDEX \`IDX_1e43309a0b5bc1a46be4662a65\` ON \`feature\``);
        await queryRunner.query(`DROP TABLE \`feature\``);
        await queryRunner.query(`DROP INDEX \`IDX_a867c6352cbea4809c8654f54c\` ON \`feature_group\``);
        await queryRunner.query(`DROP INDEX \`IDX_4e543715735568012740d8b1a5\` ON \`feature_group\``);
        await queryRunner.query(`DROP TABLE \`feature_group\``);
        await queryRunner.query(`DROP INDEX \`IDX_d07bbc72c8822787efab782a6c\` ON \`item_category\``);
        await queryRunner.query(`DROP INDEX \`IDX_7173efc7a9b80590cd4f5a0026\` ON \`item_category\``);
        await queryRunner.query(`DROP TABLE \`item_category\``);
    }

}
