import { RoleEntity } from '../../role/entities/role.entity';
import { genSalt, hash } from 'bcrypt';
import { Exclude } from 'class-transformer';
import {
	Entity,
	Column,
	BeforeInsert,
	ManyToMany,
	BeforeUpdate
} from 'typeorm';

/**
 * An entity class for user table in the database.
 */
@Entity('user')
export class UserAccountEntity {
	/**
	 * PK of the table.
	 */
	@Column({
		name: 'user_id',
		type: 'int',
		comment: 'PK of the table.',
		generated: 'increment',
		primary: true,
		nullable: false,
		unique: true
	})
	userId: number;

	/**
	 * FK to account table.
	 */
	@Column({
		name: 'account_id',
		type: 'bigint',
		comment: 'FK to account table.',
		nullable: false
	})
	accountId: number;

	/**
	 * First name of the user.
	 */
	@Column({
		name: 'firstname',
		type: 'varchar',
		length: 100,
		comment: 'First name of the user.',
		nullable: false
	})
	firstName: string;

	/**
	 * Last name of the user.
	 */
	@Column({
		name: 'lastname',
		type: 'varchar',
		length: 100,
		comment: 'Last name of the user.',
		nullable: false
	})
	lastName: string;

	/**
	 * Username of the user.
	 */
	@Column({
		name: 'username',
		type: 'varchar',
		length: 200,
		comment: 'Username of the user.',
		nullable: false,
		unique: true
	})
	userName: string;

	/**
	 * Email address of the user.
	 */
	@Column({
		name: 'email',
		type: 'varchar',
		length: 200,
		comment: 'Email address of the user.',
		nullable: false,
		unique: true
	})
	email: string;

	/**
	 * Password to login into the system.
	 */
	@Column({
		name: 'password',
		type: 'varbinary',
		length: 128,
		comment: 'Password to login into the system.',
		nullable: false
	})
	@Exclude()
	password: string;

	/**
	 * Is active user.
	 */
	@Column({
		name: 'isactive',
		type: 'tinyint',
		comment: 'Is active user.',
		nullable: false
	})
	isActive: number;

	/**
	 * Profile image path.
	 */
	@Column({
		name: 'profileimage',
		type: 'varchar',
		length: 500,
		comment: 'Profile image path.',
		nullable: true
	})
	profileImage: string;

	/**
	 * User id of a user who created the record.
	 */
	@Column({
		name: 'createdby',
		type: 'int',
		comment: 'User id of a user who created the record.',
		nullable: false
	})
	createdBy: number;

	/**
	 * Date and time when the record is created.
	 */
	@Column({
		name: 'createddate',
		type: 'datetime',
		comment: 'Date and time when the record is created.',
		nullable: false
	})
	createdDate: Date;

	/**
	 * User id of a user who modified the record.
	 */
	@Column({
		name: 'modifiedby',
		type: 'int',
		comment: 'User id of a user who modified the record.',
		nullable: true
	})
	modifiedBy: number;

	/**
	 * Date and time when the record is modified.
	 */
	@Column({
		name: 'modifieddate',
		type: 'datetime',
		comment: 'Date and time when the record is modified.',
		nullable: true
	})
	modifiedDate: Date;

	/**
	 * Is generated by the system.
	 */
	@Column({
		name: 'issystem',
		type: 'tinyint',
		comment: 'Is generated by the system.',
		nullable: false
	})
	isSystem: number;

	/**
	 * Is confirmed / varified user (email verification).
	 */
	@Column({
		name: 'isconfirmed',
		type: 'tinyint',
		comment: 'Is confirmed / varified user (email verification).',
		nullable: false
	})
	isConfirmed: number;

	@ManyToMany(() => RoleEntity, role => role.users, { cascade: true })
	// @JoinTable({
	//   Name: 'user_role',
	//   JoinColumn: {
	//     Name: 'user_id',
	//     ReferencedColumnName: 'userId'
	//   },
	//   InverseJoinColumn: {
	//     Name: 'role_id',
	//     ReferencedColumnName: 'roleId'
	//   }
	// })
	roles: RoleEntity[];

	@BeforeInsert()
	@BeforeUpdate()
	async hashPassword() {
		this.password = await hash(this.password, await genSalt(10));
	}
}
